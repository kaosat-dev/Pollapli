#!/usr/bin/python
#test sconstruct for upload only



AVR_BIN_PREFIX = None
AVRDUDE_CONF = None

if platform == 'darwin':
    # For MacOS X, pick up the AVR tools from within Arduino.app
    ARDUINO_HOME_DEFAULT = '/Applications/Arduino.app/Contents/Resources/Java'
    ARDUINO_PORT_DEFAULT = getUsbTty('/dev/tty.usbserial*')
elif platform == 'win32':
    # For Windows, use environment variables.
    ARDUINO_HOME_DEFAULT = os.environ.get('ARDUINO_HOME')
    ARDUINO_PORT_DEFAULT = os.environ.get('ARDUINO_PORT')
else:
    # For Ubuntu Linux (9.10 or higher)
    ARDUINO_HOME_DEFAULT = '/usr/share/arduino/' #'/home/YOU/apps/arduino-00XX/'
    ARDUINO_PORT_DEFAULT = getUsbTty('/dev/ttyUSB*')
    AVR_BIN_PREFIX = 'avr-'


ARDUINO_HOME_DEFAULT ='/home/ckaos/utilz/Progra/arduino-0022/'
ARDUINO_BOARD_DEFAULT = os.environ.get('ARDUINO_BOARD', 'atmega328')


TARGETPATH    = ARGUMENTS.get('TARGETPATH', os.path.realpath(os.curdir))

ARDUINO_HOME    = ARGUMENTS.get('ARDUINO_HOME', ARDUINO_HOME_DEFAULT)
ARDUINO_PORT    = ARGUMENTS.get('ARDUINO_PORT', ARDUINO_PORT_DEFAULT)
ARDUINO_BOARD   = ARGUMENTS.get('ARDUINO_BOARD', ARDUINO_BOARD_DEFAULT)
ARDUINO_VER     = ARGUMENTS.get('ARDUINO_VER', 22) # Arduino 0022
RST_TRIGGER     = ARGUMENTS.get('RST_TRIGGER', None) # use built-in pulseDTR() by default
EXTRA_LIB       = ARGUMENTS.get('EXTRA_LIB', None) # handy for adding another arduino-lib dir

if not ARDUINO_HOME:
    print 'ARDUINO_HOME must be defined.'
    raise KeyError('ARDUINO_HOME')

ARDUINO_CORE = pathJoin(ARDUINO_HOME, 'hardware/arduino/cores/arduino')
ARDUINO_SKEL = pathJoin(ARDUINO_CORE, 'main.cpp')
ARDUINO_CONF = pathJoin(ARDUINO_HOME, 'hardware/arduino/boards.txt')


# Some OSs need bundle with IDE tool-chain
if platform == 'darwin' or platform == 'win32': 
    AVR_BIN_PREFIX = pathJoin(ARDUINO_HOME, 'hardware/tools/avr/bin', 'avr-')
    AVRDUDE_CONF = pathJoin(ARDUINO_HOME, 'hardware/tools/avr/etc/avrdude.conf')

AVRDUDE_CONF = pathJoin(ARDUINO_HOME, 'hardware/tools/avrdude.conf')



# Reset
def pulseDTR(target, source, env):
    import serial
    import time
    ser = serial.Serial(ARDUINO_PORT)
    ser.setDTR(1)
    time.sleep(0.5)
    ser.setDTR(0)
    ser.close()

print("RESET TRIGGER",RST_TRIGGER,"AVRDUDE CONF",AVRDUDE_CONF)
if RST_TRIGGER:
    reset_cmd = '%s %s'%(RST_TRIGGER, ARDUINO_PORT)
else:
    reset_cmd = pulseDTR

# Upload
UPLOAD_PROTOCOL = getBoardConf(r'^%s\.upload\.protocol=(.*)'%ARDUINO_BOARD)
UPLOAD_SPEED = getBoardConf(r'^%s\.upload\.speed=(.*)'%ARDUINO_BOARD)

UPLOAD_PROTOCOL="stk500v1"

avrdudeOpts = ['-V', '-F', '-c %s'%UPLOAD_PROTOCOL, '-b %s'%UPLOAD_SPEED,
    '-p %s'%MCU, '-P %s'%ARDUINO_PORT, '-U flash:w:$SOURCES']
if AVRDUDE_CONF:
    avrdudeOpts += ['-C %s'%AVRDUDE_CONF]

fuse_cmd = '%s %s'%(pathJoin(os.path.dirname(AVR_BIN_PREFIX), 'avrdude'),
                     ' '.join(avrdudeOpts))
print("fuse_cmd",fuse_cmd)
upload = envArduino.Alias('upload', TARGET+'.hex', [reset_cmd, fuse_cmd]);
AlwaysBuild(upload)
# Clean build directory
envArduino.Clean('all', TARGETPATH+'/build/')
